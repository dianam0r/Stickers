---
const { categories } = Astro.props;
---

<script>
    const handleOptionChange = () => {
        const selection = [
            ...document.querySelectorAll(".filteroption:checked"),
        ].map(($input) => $input.value);

        document.querySelectorAll("[data-category]").forEach(($li) => {
            // Get the list of categories for this sticker
            const stickerCategories = $li.dataset.category.split(" ");

            // Check if at least one selected category matches
            const matches = selection.some((category) =>
                stickerCategories.includes(category),
            );

            if (selection.length === 0 || matches) {
                $li.classList.remove("hidden");
            } else {
                $li.classList.add("hidden");
            }
        });
        document.querySelectorAll(".filteroption").forEach(($input) => {
            const li = $input.closest("li");
            if ($input.checked) {
                li.classList.add("selected");
                li.classList.remove("background");
            } else {
                li.classList.remove("selected");
                li.classList.add("background");
            }
        });
    };

    document.addEventListener("astro:page-load", () => {
        const options = document.querySelectorAll(".filteroption");
        options.forEach((option) =>
            option.addEventListener("change", handleOptionChange),
        );
    });
</script>

<ul>
    <li class="background"><strong>Filter</strong></li>
    {
        categories.map((category) => (
            <li class="background">
                <label>
                    <span>{category.name}</span>
                    <input
                        class="filteroption"
                        type="checkbox"
                        value={category.slug}
                        name="filter"
                    />
                </label>
            </li>
        ))
    }
</ul>

<style>
    ul {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(5rem, 8.3rem));
        background-color: rgb(244, 227, 207);
    }

    .background {
        background-color: rgba(218, 168, 59, 0.342);
        color: rgb(179, 130, 24);
    }

    li {
        padding: 2rem;
        border: 0.1rem solid rgb(244, 227, 207);
        block-size: 3rem;
        display: flex; /* Ensures content within <li> is flex-aligned */
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .selected {
        color: rgb(218, 167, 59);
        background-color: rgb(244, 227, 207);
    }

    input[type="checkbox"] {
        display: none;
    }

    ul > li:first-child {
        background-color: rgba(170, 121, 15, 0.643);
        color: rgb(244, 227, 207);
    }

    strong {
        font-weight: bold;
    }
</style>
